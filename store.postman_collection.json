{
	"info": {
		"_postman_id": "cd916f43-0ae0-444b-86c0-2578ba1cf0c7",
		"name": "store",
		"description": "Tests in folders \"Pagination tests\", \"Sorting tests\" and \"Negative testing\" require files with data. Each folder documentation contains name of required file.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23352829"
	},
	"item": [
		{
			"name": "GET requests",
			"item": [
				{
					"name": "List products",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "GET requests with parameters",
			"item": [
				{
					"name": "Get product by ID",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD for Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Initial object is equal to created\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const newUser = JSON.parse(pm.environment.toObject()[\"newUser\"]);\r",
									"    newUser.id = response[\"id\"];\r",
									"    pm.expect(response).to.deep.eq(newUser);\r",
									"    pm.environment.set(\"newUserId\", response[\"id\"]);\r",
									"    pm.environment.set(\"newUser\",JSON.stringify(newUser));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{newUser}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Server returns valid user\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"newUser\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{newUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User succesfuly updated\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateUser\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updateUser}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted correct user\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateUser\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{newUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{newUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD for Orders",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Initial object is equal to created\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const newOrder = JSON.parse(pm.environment.toObject()[\"newOrder\"]);\r",
									"    newOrder.id = response[\"id\"];\r",
									"    pm.expect(response).to.deep.eq(newOrder);\r",
									"    pm.environment.set(\"newOrderId\", response[\"id\"]);\r",
									"    pm.environment.set(\"newOrder\",JSON.stringify(newOrder));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{newOrder}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Server returns valid order\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"newOrder\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{newOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{newOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Order succesfuly updated\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateOrder\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updateOrder}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted correct order\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateOrder\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{newOrderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{newOrderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRUD for Product",
			"item": [
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Initial object is equal to created\", () => {\r",
									"    const response = pm.response.json();\r",
									"    const newProduct = JSON.parse(pm.environment.toObject()[\"newProduct\"]);\r",
									"    newProduct.id = response[\"id\"];\r",
									"    pm.expect(response).to.deep.eq(newProduct);\r",
									"    pm.environment.set(\"newProductId\", response[\"id\"]);\r",
									"    pm.environment.set(\"newProduct\",JSON.stringify(newProduct));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{newProduct}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Server returns valid product\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"newProduct\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{newProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Product succesfuly updated\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateProduct\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updateProduct}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deleted correct product\", () => {\r",
									"    pm.expect(pm.response.json()).to.deep.eq(JSON.parse(pm.environment.toObject()[\"updateProduct\"]));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{newProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{newProductId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pagination tests",
			"item": [
				{
					"name": "Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(`Status code is 200`, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Length is correct\", () =>{\r",
									"    pm.expect(pm.response.json().length).to.be.eq(parseInt(pm.iterationData.get(\"length\")))\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{resource}}?page={{page}}&pageSize={{pageSize}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{resource}}"
							],
							"query": [
								{
									"key": "page",
									"value": "{{page}}"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Require file:** _**pagination.csv**_"
		},
		{
			"name": "Sorting tests",
			"item": [
				{
					"name": "Sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"function dynamicSort(property) {\r",
									"    var sortOrder = 1;\r",
									"    if(property[0] === \"-\") {\r",
									"        sortOrder = -1;\r",
									"        property = property.substr(1);\r",
									"    }\r",
									"    return function (a,b) {\r",
									"        var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;\r",
									"        return result * sortOrder;\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Is list ordered correctly\", () => {\r",
									"    const objects = pm.response.json();\r",
									"    let sortBy = pm.iterationData.get(\"sortKey\");\r",
									"    if(pm.iterationData.get(\"sortOrder\") == \"DESC\"){\r",
									"        sortBy = sortBy.slice(0)+\"-\"+sortBy.slice(1);\r",
									"    }\r",
									"    const sortedObjects = objects.sort(dynamicSort(sortBy));\r",
									"    pm.expect(objects).to.eql(sortedObjects);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{resource}}?sortOrder={{sortOrder}}&sortKey={{sortKey}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{resource}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "{{sortOrder}}"
								},
								{
									"key": "sortKey",
									"value": "{{sortKey}}"
								}
							]
						},
						"description": "**Require file:** _**sortOrder.csv**_"
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative testing",
			"item": [
				{
					"name": "Request with wrong id",
					"item": [
						{
							"name": "GET requst",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty\", () => {\r",
											"    pm.expect(pm.response.json()).to.deep.eq({});\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{resource}}/20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}",
										"20"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty\", () => {\r",
											"    pm.expect(pm.response.body).to.be.undefined;\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{resource}}/20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}",
										"20"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Requests with empty body",
					"item": [
						{
							"name": "POST request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{resource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{resource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Requests with invalid fields",
					"item": [
						{
							"name": "POST request with invalid object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"object\", '{\"id\":20,\"wrong\":\"field\", \"invalid\":\"field\", \"incorrect\":\"field\"}');\r",
											"\r",
											"const get = {\r",
											"    url:pm.collectionVariables.get(\"baseUrl\")+\"/\"+pm.iterationData.get(\"resource\"),\r",
											"    method: 'GET',\r",
											"    header: {'Content-Type': 'application/json'}\r",
											"}\r",
											"\r",
											"pm.sendRequest(get,(error, response) => {\r",
											"    pm.environment.set(`${pm.iterationData.get(\"resource\")}ObjectsLength`, error? 9 :response.json().length);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{object}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{resource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET data from resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Data doesn't added\", () => {\r",
											"    pm.environment.set(`${pm.iterationData.get(\"resource\")}NewObjectsLength`, pm.response.json().length);\r",
											"    var length = parseInt(pm.environment.get(`${pm.iterationData.get(\"resource\")}NewObjectsLength`));\r",
											"    const lengthBeforeRequest = parseInt(pm.environment.get(`${pm.iterationData.get(\"resource\")}ObjectsLength`));\r",
											"    pm.expect(length).to.be.eq(lengthBeforeRequest);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/{{resource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT request with invalid fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,404,422])\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"object\", `{\"id\":\r",
											"${parseInt(`${pm.iterationData.get(\"resource\")}NewObjectsLength`)-1},\"newWrong\":\"Field\", \"NewInvalid\":\"Field\", \"newIncorrect\":\"Field\"},\"newField\":\"dield\"`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{object}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/{{resource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{resource}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "**Require file:** _**resource.cvs**_"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "schemaForGet",
			"value": "{\"type\": \"array\", \"items\" : [{\"type\": \"object\"}]}",
			"type": "string"
		},
		{
			"key": "usersObjectsLength",
			"value": ""
		},
		{
			"key": "productsObjectsLength",
			"value": ""
		},
		{
			"key": "ordersObjectsLength",
			"value": ""
		}
	]
}